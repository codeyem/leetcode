package com.yem.leetcode;import java.util.HashMap;/** * @description: * @author: yem * @date: 2024/7/18 17:50 * 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。 * 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。 * * 输入：nums = [1,1,1,2,2,3] * 输出：5, nums = [1,1,2,2,3] * 解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。 * *输入：nums = [0,0,1,1,1,1,2,3,3] * 输出：7, nums = [0,0,1,1,2,3,3] * 解释：函数应返回新长度 length = 7, 并且原数组的前七个元素被修改为 0, 0, 1, 1, 2, 3, 3。不需要考虑数组中超出新长度后面的元素。 **/public class RemoveDuplicateEle {	public static void main(String[] args) {		int[] nums = {1,1,1,1,2,2,3};		removeDuplicates(nums);	}	/**	 * 使用双指针，	 * 因为是2个以上重复	 * 所以slow-2	 * 当fast检测到!=slow-2的元素时，说明该元素可以保留	 * 因此将此时slow元素替换替换，并且slow前进	 */	public static int removeDuplicates(int[] nums) {		int n = nums.length;		if (n <= 2) {			return n;		}		int slow = 2, fast = 2;		while (fast < n) {			if (nums[slow - 2] != nums[fast]) {				nums[slow] = nums[fast];				++slow;			}			++fast;		}		return slow;	}	public static int removeDuplicate(int[] nums) {		int n = nums.length;		if (n <= 1) {			return n;		}		int slow = 1, fast = 1;		while (fast < n) {			if(nums[slow -1] != nums[fast]){				nums[slow] = nums[fast];                slow++;			}			++fast;		}		return slow;	}}