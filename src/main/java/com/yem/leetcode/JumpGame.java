package com.yem.leetcode;/** * 给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。 * * 判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。 * * 示例 1： * * 输入：nums = [2,3,1,1,4] * 输出：true * 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。 * 示例 2： * * 输入：nums = [3,2,1,0,4] * 输出：false * 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。 */public class JumpGame {	public static void main(String[] args) {		int[] nums = {2,3,1,1,4};		System.out.println(canJump(nums));		int[] nums2 = {2,3,1,1,4};		System.out.println(canJumpPlus(nums2));	}	/**	 * 使用贪心算法，只需要考虑某一步是都可用到达	 * 假设第x步可用到达，那么它到达的前提是存在某一位置y， y+nums[y] > x;	 * 因此遍历数组，统计当前位置最大的可到达位置 y+nums[y] = jump;	 * 如果jump > nums.length则可达	 *	 */	public static boolean canJump(int[] nums) {		if(nums == null || nums.length == 0){            return true;        }		int maxJump = 0;		for (int i = 0; i < nums.length; i++){			if(maxJump < i){				return false;			}			maxJump = Math.max(maxJump, nums[i] + i);		}		return true;	}	/**	 *	 * 求上一次跳的位置	 * n -1 - x > num[]	 *	 */	public static int canJumpPlus(int[] nums) {		if(nums[0] >= nums.length - 1){			return 1;		}		int count = 1;		int maxJump = nums[0];		int border = nums[0];		for(int i = 1; i < nums.length -1; i++){			maxJump = Math.max(maxJump, nums[i] + 1);			if(i == maxJump){				count++;				//更新边界				border = maxJump;			}		}		return count + 1;	}}